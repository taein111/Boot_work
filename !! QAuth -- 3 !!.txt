!! QAuth -- 3 !!

-- QAuth를 위한 로직 모두 완성, 글에 글쓴이 추가하는 작업을 진행한다.
-----------------------------------------------------------------------------------------------------------

<글에 글쓴이 추가하기>
1 .domain 패키지의 Article.java 에 author 변수 추가
	빌더 패턴에도 author 추가해 객체를 생성할 때 author 를 입력받을 수 있게 변경한다.

 @Column(name = "author", nullable = false)
    private String author;

    @Builder //빌더 패턴으로 객체 생성
    public Article(String author, String title, String content) {
        this.author = author;
        this.title = title;
        this.content = content;
    }

-----------------------------------------------------------------------------------------------------------


2. 기존 글을 작성하는 api에서 작성자를 추가로 저장하기 위해 dto 패치키의 AddArticleRequest 파일의 toentity 메서드 수정하여
	author 값도 추가 저장한다.

    public Article toEntity(String author){
        return Article.builder()
                .title(title)
                .content(content)
                .author(author)
                .build();
    }
-----------------------------------------------------------------------------------------------------------


3. service 패키지의 BlogService 파일의 save() 메서드에서 유저이름을 추가로 입력받고, toEntity() 의 인수로 전달받은 유저이름을
	반환하도록 코드를 수정한다.

//블로그 글 추가 메서드
    public Article save(AddArticleRequest request, String userName){
        return  blogRepository.save(request.toEntity(userName));
    }

-----------------------------------------------------------------------------------------------------------

4. controller패키지의 BlogApiController 파일에서 현재 인증 정보를 가져오는  principal 객체를 파라미터로 추가한다.
	인증 객체에서 유저이름을 가져온뒤 save 메서드로 넘겨준다.

@PostMapping("/api/articles")
    public ResponseEntity<Article> addArticle(@RequestBody AddArticleRequest request, Principal principal){ //RequestBody로 요청 본문 값 매핑
        Article savedArticle = blogService.save(request, principal.getName());
    //요청한 자원이 성공적으로 생성되었으며 저장된 블로그 글 정보를 응답 객체에 담아 전송
    return ResponseEntity.status(HttpStatus.CREATED).body(savedArticle);
    }
-----------------------------------------------------------------------------------------------------------

5. 글 상세페이지에도 글쓴이의 정보가 보여야 하므로 dto 패키지의 ArticleViewResponse 파일에 author 필드 추가한다.
    private String author;

 public ArticleViewResponse(Article article) {
        this.id = article.getId();
        this.title = article.getTitle();
        this.content = article.getContent();
        this.createdAt = article.getCreatedAt();
        this.author = article.getAuthor();
    }


-----------------------------------------------------------------------------------------------------------

6. 더미데이터에  article 테이블에 author 컬럼을 추가한다.

 INSERT INTO article(title,content, author, created_at, updated_at) VALUES ('제목 1', '내용 1', 'user1' NOW(), NOW())
INSERT INTO article(title,content, author, created_at, updated_at) VALUES ('제목 2', '내용 2', 'user2' NOW(), NOW())
INSERT INTO article(title,content, author, created_at, updated_at) VALUES ('제목 3', '내용 3', 'user3' NOW(), NOW())




-----------------------------------------------------------------------------------------------------------


7. 뷰에서 글쓴이의 정보를 알 수 있게 뷰를 수정한다.
                    <div class="text-muted fst-italic mb-2" th:text="|Posted on ${#temporals.
                    format(article.createdAt, 'yyyy-MM-dd HH:mm')} By ${article.author}|"></div>
         
-----------------------------------------------------------------------------------------------------------

==> 모든 비즈니스 로직 완성.


<<QAuth 뷰 구성하기>>

1. UserviewController 맵핑 리턴 값 login에서 oauthlogin 으로 바꾸기

@Controller
public class UserViewController {
    @GetMapping("/login")
    public String login() {
        return "oauthLogin";
    }


2. oauthLogin 뷰 템플릿 만들기

3. 




