!! QAuth -- 3 !!

-- QAuth를 위한 로직 모두 완성, 글에 글쓴이 추가하는 작업을 진행한다.
-----------------------------------------------------------------------------------------------------------

<글에 글쓴이 추가하기>
1 .domain 패키지의 Article.java 에 author 변수 추가
	빌더 패턴에도 author 추가해 객체를 생성할 때 author 를 입력받을 수 있게 변경한다.

 @Column(name = "author", nullable = false)
    private String author;

    @Builder //빌더 패턴으로 객체 생성
    public Article(String author, String title, String content) {
        this.author = author;
        this.title = title;
        this.content = content;
    }

-----------------------------------------------------------------------------------------------------------


2. 기존 글을 작성하는 api에서 작성자를 추가로 저장하기 위해 dto 패치키의 AddArticleRequest 파일의 toentity 메서드 수정하여
	author 값도 추가 저장한다.

    public Article toEntity(String author){
        return Article.builder()
                .title(title)
                .content(content)
                .author(author)
                .build();
    }
-----------------------------------------------------------------------------------------------------------


3. service 패키지의 BlogService 파일의 save() 메서드에서 유저이름을 추가로 입력받고, toEntity() 의 인수로 전달받은 유저이름을
	반환하도록 코드를 수정한다.

//블로그 글 추가 메서드
    public Article save(AddArticleRequest request, String userName){
        return  blogRepository.save(request.toEntity(userName));
    }

-----------------------------------------------------------------------------------------------------------

4. controller패키지의 BlogApiController 파일에서 현재 인증 정보를 가져오는  principal 객체를 파라미터로 추가한다.
	인증 객체에서 유저이름을 가져온뒤 save 메서드로 넘겨준다.

@PostMapping("/api/articles")
    public ResponseEntity<Article> addArticle(@RequestBody AddArticleRequest request, Principal principal){ //RequestBody로 요청 본문 값 매핑
        Article savedArticle = blogService.save(request, principal.getName());
    //요청한 자원이 성공적으로 생성되었으며 저장된 블로그 글 정보를 응답 객체에 담아 전송
    return ResponseEntity.status(HttpStatus.CREATED).body(savedArticle);
    }
-----------------------------------------------------------------------------------------------------------

5. 글 상세페이지에도 글쓴이의 정보가 보여야 하므로 dto 패키지의 ArticleViewResponse 파일에 author 필드 추가한다.
    private String author;

 public ArticleViewResponse(Article article) {
        this.id = article.getId();
        this.title = article.getTitle();
        this.content = article.getContent();
        this.createdAt = article.getCreatedAt();
        this.author = article.getAuthor();
    }


-----------------------------------------------------------------------------------------------------------

6. 더미데이터에  article 테이블에 author 컬럼을 추가한다.

 INSERT INTO article(title,content, author, created_at, updated_at) VALUES ('제목 1', '내용 1', 'user1' NOW(), NOW())
INSERT INTO article(title,content, author, created_at, updated_at) VALUES ('제목 2', '내용 2', 'user2' NOW(), NOW())
INSERT INTO article(title,content, author, created_at, updated_at) VALUES ('제목 3', '내용 3', 'user3' NOW(), NOW())




-----------------------------------------------------------------------------------------------------------


7. 뷰에서 글쓴이의 정보를 알 수 있게 뷰를 수정한다.
                    <div class="text-muted fst-italic mb-2" th:text="|Posted on ${#temporals.
                    format(article.createdAt, 'yyyy-MM-dd HH:mm')} By ${article.author}|"></div>
         
-----------------------------------------------------------------------------------------------------------

==> 모든 비즈니스 로직 완성.

-----------------------------------------------------------------------------------------------------------
<<QAuth 뷰 구성하기>>

1. UserviewController 맵핑 리턴 값 login에서 oauthlogin 으로 바꾸기

@Controller
public class UserViewController {
    @GetMapping("/login")
    public String login() {
        return "oauthLogin";
    }


2. oauthLogin 뷰 템플릿 만들기

3.  HTML 파일  ( 뷰 템플릿) 과 연결할 자바스크립트 파일을 만든다. - token.js

   => 이 스크립트는 파라미터로 받은 토큰이 있다면 토큰을 로컬 스토리지에 저장한다.

const token = searchParam('token')

if (token){
    localStorage.setItem("access_token", token)
}

function searchParam(key){
    return new URLSearchParams(location.search).get(key);
}



4. 기존 article.js 코드 수정 -> createbutton 관련 코드 수정, 토큰 기반 요청을 사용하기 위해 바꾼다.

const createButton= document.getElementById("create-btn");
if(createButton){
    //클릭 이벤트가 감지되면 생성 api 요청
    createButton.addEventListener("click",(event)=>{
        body = JSON.stringify({
            title: document.getElementById("title").value,
            content: document.getElementById("content").value,
        });
        function success(){
            alert("등록 완료되었습니다.");
            location.replace("/articles");
        }
        function fail(){
            alert("등록 실패했습니다.");
            location.replace("/articles");
        }
        httpRequest("POST","/api/articles",body, success, fail);
    });
}

//쿠키를 가져오는 함수
function getCookie(key) {
    var result = null;
    var cookie = document.cookie.split(";");
    cookie.some(function (item){
        item = item.replace(" ", "");
        var dic = item.split("=")

        if(key === dic[0]){
            result = dic[1];
            return true;
        }
    });
    return result;
}


// HTTP 요청을 보내는 함수
function httpRequest(method, url, body, success, fail) {
    fetch(url, {
        method: method,
        headers: { // 로컬 스토리지에서 액세스 토큰 값을 가져와 헤더에 추가
            Authorization: 'Bearer ' + localStorage.getItem('access_token'),
            'Content-Type': 'application/json',
        },
        body: body,
    }).then(response => {
        if (response.status === 200 || response.status === 201) {
            return success();
        }
        const refresh_token = getCookie('refresh_token');
        if (response.status === 401 && refresh_token) {
            fetch('/api/token', {
                method: 'POST',
                headers: {
                    Authorization: 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    refreshToken: getCookie('refresh_token'),
                }),
            })
                .then(res => {
                    if (res.ok) {
                        return res.json();
                    }
                })
                .then(result => { // 재발급이 성공하면 로컬 스토리지값을 새로운 액세스 토큰으로 교체
                    localStorage.setItem('access_token', result.accessToken);
                    httpRequest(method, url, body, success, fail);
                })
                .catch(error => fail());
        } else {
            return fail();
        }
    });
}




5.삭제, 수정 기능도 httpRequest 함수를 사용하도록 코드를 추가한다.

//삭제 기능
const deleteButton = document.getElementById('delete-btn')

if(deleteButton){
    deleteButton.addEventListener("click", event=>{
        let id = document.getElementById('article-id').value;
        // 클릭 이벤트가 발생하면 fetch 메서드를 통해 delete 요청을 보내는 역할
        //then 메서드는 fetch가 잘 완료되면 연이어실행되는 메서드
        //location.replace() 메서드는 실행 시 사용자의 웹 브라우저 화면을 현재 주소를 기반해 옮겨주는 역할.
        function success(){
        alert("삭제가 완료되었습니다.");
        location.replace("/articles");
        }
        function fail(){
        alert("삭제 실패했습니다.");
        location.replace("/articles");
        }

        httpRequest('DELETE',`/api/articles/${id}`, null, success, fail);
    });
}




//수정 기능
const modifyButton = document.getElementById('modify-btn');

if (modifyButton) {
    modifyButton.addEventListener('click', event => {
        let params = new URLSearchParams(location.search);
        let id = params.get('id');

        body = JSON.stringify({
            title: document.getElementById('title').value,
            content: document.getElementById('content').value
        })

        function success() {
            alert('수정 완료되었습니다.');
            location.replace(`/articles/${id}`);
        }

        function fail() {
            alert('수정 실패했습니다.');
            location.replace(`/articles/${id}`);
        }

        httpRequest('PUT',`/api/articles/${id}`, body, success, fail);
    });
}

-----------------------------------------------------------------------------------------------------------

< 글 수정, 삭제, 글쓴이 확인 로직 추가하기 > 

- 글을 수정하거나 삭제할 때 요청 헤더에 토큰을 전달하므로 사용자 자신이 작성한 글인지 검증할 수 있다.
	따라서 본인 글이 아닌데 수정, 삭제를 시도하는 경우에 예외를 발생시키도록 코드를 수정한다.


//블로그 글 추가 메서드
    public Article save(AddArticleRequest request, String userName){
        return  blogRepository.save(request.toEntity(userName));
    }

    public List<Article> findAll(){
        return blogRepository.findAll();
    }

    public Article findById(Long id){
        return blogRepository.findById(id)
                .orElseThrow(() ->new IllegalArgumentException("not found: "+id));
    }

    public void delete(Long id){
        Article article  =blogRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("not found :" +id));
        authorizaArticleAuthor(article);
        blogRepository.delete(article);
    }

    @Transactional
    public Article update(Long id, UpdateArticleRequest request){
        Article article = blogRepository.findById(id)
                .orElseThrow(() ->new IllegalArgumentException("not found: "+id));
        authorizaArticleAuthor(article);
        article.update(request.getTitle(), request.getContent());
        return article;
    }

    //게시글을 작성한 유저인지 확인
    private static void authorizaArticleAuthor(Article article){
        String userName = SecurityContextHolder.getContext().getAuthentication().getName();
        if (!article.getAuthor().equals(userName)){
            throw new IllegalArgumentException("not authorized");
        }
    }
}

