!! 댓글 생성하기 !!

1. 요청을 받아 응답할 컨트롤러 만들기 (post)
2. 컨트롤러는 서비스에 댓글 생성 작업을 위임하고 결과만 받아서 클라이언트에 응답, 
3. 서비스에 위임하기 위해 CommentService의 create(articleId, dto) 메서드 호출

  @PostMapping("/api/articles/{articleId}/comments") //댓글 생성 요청 접수
    //create 메서드 생성, pathvaruable로 요청 url 의 articleId를 가져오고, http요청의 body로부터 json 데이터를 받아오므로 requestBody를 이용해 CommentDto dto로 받는다.
    public ResponseEntity<CommentDto> create(@PathVariable Long articleId, @RequestBody CommentDto dto){
        //서비스에 위임
        CommentDto createDto = commentService.create(articleId, dto);
        //결과 응답
        return ResponseEntity.status(HttpStatus.OK).body(createDto);

    }

4. 요청을 처리할 서비스 만든다 
 1)db에서 부모 게시글 조회해 가져오고 업을 경우 예외 발생시키기
 2) 부모 게시글의 새 댓글 엔티티 생성하기 
 3) 생성된 엔티티를 db에 저장하기
 4) db에 저장한 엔티티를 dto에 변환해 반환하기

@Transactional //create 메서드는 db내용을 바꾸기 때문에 트랜잭션 처리해야한다.
    public CommentDto create(Long articleId, CommentDto dto) {
        //1 . 게시글 조회 및 예외 발생
        Article article = articleRepository.findById(articleId)
                .orElseThrow(() -> new IllegalArgumentException("댓글 생성 실패!" + "대상 게시글이 없습니다."));
        //2. 댓글 엔티티 생성
        Comment comment = Comment.createComment(dto, article);
        //3. 댓글 엔티티를 db에 저장
        Comment created = commentRepository.save(comment);
        //4, dto로 변환해 반환
        return CommentDto.createCommentDto(created);
    }


5. createComment 메서드 만들기
	
    public static Comment createComment(CommentDto dto, Article article) {
        //예외 발생
        if(dto.getId() != null)
            throw new IllegalArgumentException("댓글 생성 실패, 댓글의 id가 없어야 합니다.");
        if(dto.getArticleId() != article.getId())
            throw new IllegalArgumentException("댓글 생성 실패 ! 게시글의 id가 잘못됐습니다");
        //엔티티 생성 및 반환
        return new Comment(
                dto.getId(),
                article,
                dto.getNickname(),
                dto.getBody()
        );
    }

