!! 댓글 CRUD 만들기 !!

- 댓글과 게시글의 관계
게시판 기준 : 일대다 관계(onetoMany)

댓글 기준 : 다대일 관계(many - to - one)

--- 1.댓글 엔티티 만들기

엔티티 폴더 Comment 클래스를 만든다 , 어노테이션 추가
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Getter
@ToString
public class Comment {
	@ID
        @GeneratedValue(strategy = GenerationType.IDENTITY) //db가 자동으로 1씩 증가.
	private Long id; // 대표키

	@ManyToOne
	@JoinColumn(name="article_id")
	private Article article; // 해당 댓글의 부모 게시글 ( 외래키)
	
	@Column
	private String nickname; // 댓글 단사람
	@Column
	private String body;  // 댓글 본문
}


----------2.더미데이터 추가하기 (연습용)


----------3.댓글 레퍼지토리 만들기
JpaRepository<대상 엔티티, 대표키 값의 타입> 상속하기

레퍼지토리 안에 메서드 생성
// 특정 게시글의 모든 댓글 조회
	@Query(value = "SELECT * FROM comment WHERE article_id = :articleId" , nativeQuery = true)
    List<Comment> findByArticleId(@Param("articleId") Long articleId);

// 특정 닉네임의 모든 댓글 조회
	List<Comment> findByNickname(@Param("nickname") String nickname);
==> xml로 쿼리 수행 (META-INF > orm.xml 생성)


------------------ 댓글 레퍼지토리 테스트코드 생성

 @DisplayName("특정 게시글의 모든 댓글 조회")
    void findByArticleId() {
        // Case 1 : 4번 게시글의 모든 댓글 조회
        {
            // 1. 입력 데이터 준비
            Long articleId = 4L;
            // 2. 실제 데이터
            List<Comment> comments = commentRepository.findByArticleId(articleId);
            // 3. 예상 데이터
            Article article = new Article(4L, "당신의 인생 영화는?", "댓글 고");
            Comment a = new Comment(1L, article, "Park", "굿 윌 헌팅");
            Comment b = new Comment(2L, article, "Kim", "아이 엠 샘");
            Comment c = new Comment(3L, article, "Choi", "쇼생크 탈출");
            List<Comment> expected = Arrays.asList(a,b,c);
            // 4. 비교 및 검증
            assertEquals(comments.toString(), expected.toString());
        }

        // Case 2 : 1번 게시글의 모든 댓글 조회 ( 데이터 없을때)
            //1. 입력 데이터 준비
            Long articleId = 1L;
            //2. 실제 데이터
            List<Comment> comments = commentRepository.findByArticleId(articleId);
            //3. 예상 데이터
            Article article = new Article(1L, "가가가가", "1111");
            List<Comment> expected = Arrays.asList();
            //4. 비교 및 검증
            assertEquals(comments.toString(), expected.toString());
    }

    @DisplayName("특정 닉네임의 모든 댓글 조회")
    @Test
    void findByNickname() {
        // case 1 : Park의 모든 댓글 조회
        //1. 입력 데이터 준비
        String nickname = "Park";
        //2. 실제 데이터
        List<Comment> comments = commentRepository.findByNickname(nickname);
        //3. 예상 데이터
        Comment a = new Comment(1L, new Article(4L, "당신의 인생 영화는?", "댓글 고"), nickname, "굿 윌 헌팅");
        Comment b = new Comment(4L, new Article(5L, "당신의 소울푸드는?", "댓글 고고"), nickname, "치킨");
        Comment c = new Comment(7L, new Article(6L, "당신의 취미는?", "댓글 고고고"), nickname, "조깅");
        List<Comment> expected = Arrays.asList(a, b, c);
        //4. 비교 및 검증
        assertEquals(comments.toString(), expected.toString(), "park의 모든 댓글을 출력");

    }



==> 요약

