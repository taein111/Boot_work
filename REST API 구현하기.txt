!! REST API 구현하기 !!

-rest api의 구현과정
 : url을 설계해야한다.
 : 조회 - /api/articles/ or /api/articles/{id}
 : 생성 - /api/articles/
 : 수정 - /api/articles/{id}
 : 삭제 - /api/articles/{id]
  

주소설계가 끝나면 url 요청을 받아 그 결과를 json으로 반환해줄 컨트롤러도 만들어야 한다.
게시판을 만들때는 일반 컨트롤러를 사용했지만, rest api로 요청과 응답을 주고받을 때는
rest 컨트롤러를 사용한다. 또한 적절한 상태코드를 반환하기 위해 responseEntity 클래스 활용한다.

api 패키지를 만들고 ApiController 클래스 파일을 만든다 -> @ RestController 선언

<rest컨트롤러와 일반 컨트롤러의 차이>
 : rest 컨트롤러는 json이나 텍스트 데이터를 반환하는 반면,
  일반컨트롤러는 뷰 페이지를 반환한다!!


----------------------------------------------------------------------

REST API : GET 구현하기
- 모든 게시글 조회하기 :
	 @GetMapping("/api/articles")
    public List<Article> index(){
        return articleRepository.findAll();
    }
 
-단일 조회하기 :
	 @GetMapping("api/articles/{id}")
    public Article show(@PathVariable Long id){
        return articleRepository.findById(id).orElse(null);
    }


REST API : POST 구현하기
	@PostMapping("/api/articles")
    public Article create(@RequestBody ArticleForm dto){  //RequestBody 통해서 dto값 그대로 보내기
        Article article = dto.toEntity();
        return articleRepository.save(article);
    }


REST API : PATCH 구현하기
	    //PATCH
    @PatchMapping("api/articles/{id}")
    public ResponseEntity<Article> update(@PathVariable Long id, @RequestBody ArticleForm dto){ //요청 메시지의 본문을 가져오기 위한 Requestbody
        //1. dto -> 엔티티 변환하기
        Article article = dto.toEntity();
        log.info("id: {}, article: {}", id, article.toString());
        //2. 타깃 조회하기
        Article target = articleRepository.findById(id).orElse(null);
        //3. 잘못된 요청 처리하기
        if(target ==null || id != article.getId()){
            //400, 잘못된 요청 응답!
            log.info("잘못된 요청 ! id: {}, article: {}", id, article.toString());
            return  ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }
        //4. 업데이트 및 정상 응답(200)하기
        target.patch(article); //기존 데이터 target에  patch 메서드로 수정할 데이터 article로 바꿔준다
        Article updated = articleRepository.save(target);
        return  ResponseEntity.status(HttpStatus.OK).body(updated);
    }


REST API : DELETE 구현하기
	@DeleteMapping("/api/articles/{id}")
    public ResponseEntity<Article> delete(@PathVariable Long id){
        //1.대상 찾기
        Article target = articleRepository.findById(id).orElse(null);
        //2.잘못된 요청 처리하기
        if(target == null){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }
        //3. 대상 삭제하기
        articleRepository.delete(target);
        return ResponseEntity.status(HttpStatus.OK).build();
    }