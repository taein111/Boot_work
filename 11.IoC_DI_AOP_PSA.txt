스프링 부트의 주요 특징

- 톰캣, 제티, 언더토우 등 웹 애플리케이션 서버(WAS)가 내장되어있어 따로 설치하지 않아도 독립적으로 실행 가능.
- 빌드 구성을 단순화하는 스프링 부트 스타터를 제공
- XML설정을 하지 않고 자바 코드로 모두 작성할  수 있다.
- JAR를 이용해서 자바 옵션만으로 배포가 가능하다.
- 애플리케이션의 모니터링 및 관리 도구인  스프링 액츄에이터(spring actuator) 제공


<스프링 콘셉트>

[ 제어의 역전 / 의존성 주입 ]
	IoC		DI
------------------------------------------------------------------------------------------------------------

[IoC]
IoC는 inversion of Control을 줄인 표현이다. 직역하면 제어의 역전. 
=> 객체를 생성할 때 객체가 필요한 곳에서 직접 생성하는 것이 아닌, 외부에서 관리하는 객체를 가져와 사용하는 것.
=> 스프링은 스프링 컨테이너가 객체를 관리, 제공하는 역할을 한다.

public class A {
	private B b;   <<-- 코드에서 객체를 생성하지 않음, 어디선가 받아온 객체를 b에 할당.
}
------------------------------------------------------------------------------------------------------------

[DI]
어떤 클래스가 다른 클래스에 의존한다는 뜻. 
@Autowired라는 애너테이션을 통해 스프링 컨테이너에 있는 빈이라는 것을 주입하는 역할.
 빈 : 스프링 컨테이너에서 관리하는 객체

public class A {
// A에서 B를 주입받음
@Autowired
B b;
}

==> 이렇게 해도 프로그램은 잘 동작한다. 스프링 컨테이너라는 곳에서 객체를 주입했기 때문이다. 
	=> 스프링 컨테이너가 B 객체를 만들어서 클래스 A에 주는 것.

------------------------------------------------------------------------------------------------------------

[스프링 컨테이너]
- 빈을 생성하고 관리한다. 즉 , 빈이 생성되고 소멸되기까지 생명주기를 이 스프링 컨테이너가 관리한다. 
@Autowired  같은 애너테이션을 사용해 빈을 주입받을 수 있게 DI를 지원한다.


[빈]
- 스프링 컨테이너가 생성하고 관리하는 객체.  위에 B가 바로 빈이다. 
- 스프링은 빈을 스프링 컨테이너에 등록하기 위해 XML 파일 설정, 에너테이션 추가 등의 방법을 제공한다.
 	=> 빈을 등록하는 방법은 여러가지가 있다.

- ex) MyBean 이라는 클래스에 @Component 애너테이션을 붙이면 MyBean 클래스가 빈으로 등록된다. 
	이때 빈의 이름은 클래스 이름의 첫 글자를 소문자로 바꿔 관리한다. (mybean)

------------------------------------------------------------------------------------------------------------

[AOP - 관점지향 프로그래밍]
- 프로그래밍에 대한 관심을 핵심 관점, 부가 관점으로 나누어서 관심 기준으로 모듈화 하는 것.

[PSA - 이식 가능한 서비스 추상화]
- 스프링에서 제공하는 다양한 기술들을 추상화해 개발자가 쉽게 사용하는 인터페이스
-ex) 클라이언트의 매핑과 클래스, 메서드의 매핑을 위한 애너테이션
 	=> 어떤 기술을 사용하든 일관된 방식으로 데이터베이스에 접근하도록 인터페이스를 지원.

------------------------------------------------------------------------------------------------------------


==> 요약

IoC : 객체의 생성과 관리를 개발자가 하는 것이 아니라 프레임워크가 대신하는 것
DI : 외부에서 객체를 주입받아 사용하는 것.
AOP : 프로그래밍을 할 때 핵심 관점과 부가 관점을 나누어 개발하는 것.
PSA : 어느 기술을 사용하던 일관된 방식으로 처리하도록 하는 것


------------------------------------------------------------------------------------------------------------

[텍스트 블록]
- """로 감싼 텍스트를 사용해 여러 줄의 텍스트를 표현할 수 있다.
String query17 = """
	SELECT * FROM "items"
	WHERE "status" = "ON_SALE"
	ORDER BY "price";
	""";

[레코드]
- 데이터 전달을 목적으로 하는 객체를 더 빠르고 간편하게 만들기 위한 기능 . 
 	레코드는 상속할 수 없고 파라미터에 정의한 필드는 private final로 정의된다.
	레코드는 getter를 자동으로 만들기 때문에 애너테이션이나 메서드로 게터 정의를 하지 않아도 된다.

record Item(String name, int price){
	// 이렇게 하면 파라미터가 private final로 정의된다.
}
Item juice = new Item("juice", 3000);
juice.price(); //3000


[SpringBootConfiguration]
- 스프링 부트 관련 설정을 나타내는 애너테이션

[ComponentScan]
- 사용자가 등록한 빈을 읽고 등록하는 애너테이션. 
- Compoent라는 애너테이션을 가진 클래스들을 찾아 빈으로 등록하는 역할. 

[EnableAutoConfiguration]
-스프링 부트에서 자동 구성을 활성화하는 애너테이션. 스프링 부트 서버가 실행될때 스프링 부트의 메타 파일을 읽고
정의된 설정들을 자동으로 구성하는 역할을 수행한다.


------------------------------------------------------------------------------------------------------------


[@RestController]
- 라우터 역할을 하는 애너테이션. 라우터란 HTTP 요청과 메서드를 연결하는 장치. 
- 이 애너테이션이 있어야 클라이언트의 요청에 맞는 메서드를 실행할 수 있다.


==> @Controller 애너테이션이 @Component 애너테이션을 가지고 있다.
	=> @Configuration, @Repository, @Service  애너테이션 모두 @Component 애너테이션을 가지고 있다.

------------------------------------------------------------------------------------------------------------

