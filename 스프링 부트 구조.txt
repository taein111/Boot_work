
------------------------------------------------------------------------------------------------------------
컨트롤러	 		서비스 			리포지터리

프레젠테이션<-->	비즈니스 계층	<-->	퍼시스턴스 계층	<-->	데이터베이스
계층


[프레젠테이션 계층]
: HTTP 요청을 받고 이 요청을 비즈니스 계층으로 전송하는 역할. 컨트롤러가 프레젠 테이션 계층
 -> 스프링 부트 내 여러개 있을 수 있다!

[비즈니스 계층]
: 모든 비즈니스 로직을 처리한다.
비즈니스 로직 : 서비르를 만들기 위한 로직
웹사이트에서 벌어지는 모든 작업, 이를테면 주문 서비스라고 한다면 주문 개수, 가격 등의 데이터를 처리하기 위한 로직,
주문처리를 하다가 발생하는 예외 처리 로직, 주문을 받거나 취소하는 것 같이 프로세스 구현하기 위한 로직 등
 	=> 서비스가 비즈니스 계층의 역할을 한다.

[퍼시스턴스 계층]
: 모든 데이터베이스 관련 로직  처리. 
 이 과정에서 데이터 베이스에 접근하는 DAO 객체를 사용할 수 있다.
DAO : 데이터 베이스 계층과 상호작용하기 위한 객체.
	=> 리포지터리가 퍼시스턴스 계층 역할을 한다.

===> 계층은 개념의 영역이며, 컨트롤러, 서비스 , 리포티터리는 실제 구현을 위한 영역이다.


------------------------------------------------------------------------------------------------------------

<< Main 디렉터리 구성하기 >>

1. templeates 디렉터리 만들기

2. application.yml 파일 생성 -> 서버가 실행되면 자동으로 로딩되는 파일, 데이터 베이스의 설정 정보, 로깅 설정 정보 등이 들어감

3. build.gradle에 의존성 추가하기

4. 프레젠테이션, 비즈니스, 퍼시스턴스 계층 만들기


	[프레젠테이션] : TestController

@RestController
public class TestController {
    @Autowired //의존성 주입
    TestService testService;

    @GetMapping("/test")
    public List<Member> getAllMembers() { //리스트 타입을 받는 getAllmembers 메서드 생성.
        List<Member> members = testService.getAllMembers();
        return members;

    }
}


	[비즈니스] : TestService

@Service
public class TestService {
    @Autowired //MemberRepository를 사용하기 위한 의존성(빈) 주입
    MemberRepository memberRepository;

    public List<Member> getAllMembers(){
        return memberRepository.findAll();  //멤버 목록 얻기.
    }


	[퍼시스턴스] : Member(DAO) / MemberRepository

@Repository //db에서 데이터를 가져오는 퍼시스턴스 계층 역할, member 라는 이름의 테이블에 접근해서 Member 클래스에 매핑하는 구현체
public interface MemberRepository extends JpaRepository<Member, Long> {
}



5. 애플리케이션이 실행될 때 저장할 더미데이터를 넣을 sql 파일 생성 (data.sql)


------------------------------------------------------------------------------------------------------------

==> 요약 : 스프링 부터 요청-응답 과정 한번에 이해하기

1. 브라우저에서 톰캣에 /test Get 요청
 : 스프링 부트 내로 이동, 디스패처서블릿이 url을 분석하고, 요청을 처리할 수 있는 컨트롤러를 찾는다. TestController가 
  /test라는 패스에 대한 GET요청을 처리할 수 있는 getAllMembers()메서드를 가지고 있으므로 디스패처 서블릿은
	TestController에게 /test GET 요청을 전달한다.

2. /test Get 요청을 처리할 수 있는 메서드와 요청이 매치된다. 이 메서드(프레젠테이션 계층)에에서는 비즈니스계층(서비스) 퍼시스턴	스계층(리포지터리)
	계층을 통하면서 필요한 데이터를 가져온다.

3. 뷰 리졸버는 템플릿 엔진을 통해 html 문서를 만들거나 json, xml 등의 데이터를 생성한다.

4. 디스패처 서블릿에 의해 응답으로 클라이언트에게 반환된다.
