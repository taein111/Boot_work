2024.04.05 총정리복습

1. 폼데이터 받아올 템플릿 (new ) 만들기
2. 폼데이터 action에 맵핑값 주기
3. 맵핑값 가져와서 컨트롤러에 post매핑하기
4. 폼데이터를 받을 dto 만들기
5. dto에서 폼데이터 양식에 맞춰 필드선언하기. 롬복활용
6. 폼데이터를  dto에 담기 (create메서드에서 매개변수로  dto타입의 매개변수를 준다)
7. 입력 폼과 dto 필드 연결하기 (인풋 태그에 name값 준다.)
8. dto를 엔티티로 변환하기 
 -> 8-1.  엔티티 클래스 만들기 ( 엔티티 패키지 -> Article 클래스 생성) / 필드 선언 (데이터로 들어갈 컬럼) + 엔티티 선언 
     8-2.  dto에서  toEntity 메서드 선언(dto를 엔티티로 만들기위한)
9. 레퍼지토리를 통해 엔티티를 디비에 저장
 -레퍼지토리 객체 선언 후 article 엔티티를 저장해 saved 객체에 변환
	Article saved = articleRepository.save(article);


---------여기까지가 폼데이터 받아오고 엔티티 만들고 레퍼지토리 통한 디비 저장(create) -----------------------


!!  데이터 조회하기 !!! "select" 
1. 사용자는 데이터 조회를 위해 url 요청
2. 서버의 컨트롤러가 요청을 받아 해당 url 에서 찾으려는 데이터 정보를 레퍼지토리로 전달
3. 레퍼지토리는 정보를 가지고 디비에 데이터 조회 요헝
4. 디비는 해당 데이터를 찾아 엔티티로 반환
5. 반환된 엔티티는 모델을 통해 뷰 템플릿으로 전달.
6. 최종적으로 결과 뷰 페이지가 완성돼 사용자의 화면에 출력

상세보기 조회==>
1. 컨트롤러에 show 메서드를 만들어 상세 조회 기능 만들기(articles/{id} 맵핑)
	메서드에 @Pathvariable 어노테이션 붙이기. Long id 매개변수
2. 레퍼지토리에서 db에 저장된 데이터를 id로 조회하기 위해 findById메서드 사용
   +특별히 조회된 데이터가 없는 경우도 처리해야하므로 orElse(null)메서드도 사용

3. id로 db에서 조회한 데이터는 모델에 article이라는 이름으로 등록
  - model.addattribute("article", articleEntity);

4. 최종적으로 모델에 등록한 데이터를 뷰 페이지에서 사용할 수 있게 설정한다.
 -return "articles/show";



전체목록보기 조회 ===>

1. 단일 데이터를 조회할때는 레퍼지토리가 엔티티를 반환했다면, 데이터 목록을 조회할때에는
	엔티티의 묶음인 !리스트!를 반환해야한다.

2. 데이터 목록 조회 = articles 매핑 index메서드
@Getmapping("/articles"	
public String index(){ return "";}

3. 모든 데이터 가져오기
List<Article> articleList = articleRepository.findAll();
 3-1 . 레퍼지토리 findAll매서드 오버로딩으로 <Iterable> 타입으로 반환

4. 모델에 가져온 데이터 등록하기
model.addattribute("articleList",articleList) ;

5. 뷰 페이지 설정하기
return "articles/index";


---------------------여기까지 게시글 상세보기/전체보기 (데이터 select)  ------------------




!!링크 및 리다이렉트!!
= 링크 : 미리 정해놓은 요청을 간편히 전송하는 기능, 페이지 이동을 위해 사용
 리다이렉트 : 클라이언트가 보낸 요청을 마친 후 계속해서 처리할 다음 요청 주소를 재지시하는 것.


- 새 글 작성 링크 만들기
index 파일에 <a href="articles/new">새 글 작성 </a> 만들기

-입력페이지 -> 목록페이지 돌아가기
new 파일에 <a href="/articles"> 돌아가기 </a> 만들기

-입력페이지 -> 상세페이지 이동하기
폼 데이터를 제출할 때 post매핑된 메서드에 return값으로 리다이렉트하기
=> return "redirect:/articles/"+saved.getId();    //엔티티 (Article)에 Getter 추가 

-상세페이지 -> 목록페이지 돌아가기
show 파일에 돌아가기 버튼 추가
=> <a href="/articles"> 돌아가기 </a>

-목록페이지 -> 상세페이지 이동하기
index 파일에 title 링크 주기 
=>  <th><a href="articles/{{id}}">{{title}}</a></th>


---------------------여기까지 링크 / 리다이렉트 -----------------------------




!! 데이터 수정하기 !!

큰 틀 : 수정페이지 만들고 기존 데이터 불러오기 - > 데이터 수정해 db 반영하고 결과를 
	상세페이지로 리다이렉트하기.

<수정페이지 만들고 기존 데이터 불러오기 >
 -> 상세페이지에서 [수정하기] 버튼 만들기
 -> 요청을 받은 컨트롤러가 해당 글의 id로 db에서 데이터 찾아 가져오기
	: Article articleEntity = articleRepository.findById(id).orElse(null)
 -> 컨트롤러는 가져온 데이터를 뷰에서 사용할 수 있도록 모델에 등록하기.
	: model.addattribute("article",articleEntity);
 -> 모델에 등록된 데이터는 수정페이지에서 보여주기 -> 내용을 수정할 수 있는 상태
	

<데이터 수정 해 db반영하고 결과를 상세페이지로 리다이렉트하기>
 -> 폼 데이터(수정 요청 데이터)를 dto에 담아 컨트롤러에서 받기
	public String update(ArticleForm form)
 -> dto를 엔티티로 변환하기
	Artricle articleEntity = form.toEntity();
 -> db에서 기존 데이터를 수정 데이터로 갱신.
   1. db에서 기존 데이터 가져오기
	Atricle target = articleRepository.findById(articleEntity.getId()).orElse(null)
   2. 기존 데이터 값 갱신하기
 	if(target != null){
	articleRepository.save(articleEntity)	
 -> 수정 데이터를 상세페이지로 리다이렉트.
	return "redirect:/articles/"+articleEntity.getId();


Spring.jpa.defer-datasource-initialization=true  <<--data.sql 생성 시 프로퍼티즈에 삽입



