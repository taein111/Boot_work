!! 웹 페이지에서 댓글 보기 !!
-------------------------------------------------------------------------
	------>	Rest 컨트롤러
view  	  dto     서비스	 	<----엔티티---->        DB
	<------	레퍼지토리

---------------------------------------------------------------------------

<댓글 목록 보기>
상세페이지(SHOW) 에서 댓글 영역을 보여준다.
1. 기존 댓글을 보여주는 영역(_list)
2. 댓글을 입력하는 영역(_new)

show 템플릿 하단에 {{>comments/_comments}} 삽입 후 _comments , _list , _new 파일 만들기
<div id="comments-list">
    {{#commentDtos}}
        <div class="card" id="comments-{{id}}">
            <div class="card-header">{{nickname}}</div>
            <div class="card-body">{{body}}</div>
        </div>
    {{/commentDtos}}
</div>

==> 뷰 페이지에서 사용할 변수는 반드시 모델에 등록해야 사용할 수 있다. 
1. article 컨트롤러에서 모델 등록하기
1). id를 조회해 데이터 가져오기 
- show 메서드에서 List<CommentDto> commentDtos = commentService.comments(id); 
2) 모델에 데이터 등록하기
 - model.addAttribute("commentDtos", commentDtos);

---------------------------------------------------------------------------

!! 웹 페이지에서 댓글 등록하기 !!

새 댓글을 등록하기 위해서는 뷰 페이지를 만들고 자바스크립트 코드로 REST API 를 호출해야한다.

1. 댓글 생성 뷰 페이지(_new)에 댓글 입력 폼 만들기
2. [댓글 작성] 버튼 클릭해 REST API 요청 보내기


<자바스크립트 api>
document.querySelector(): 웹 페이지에서 특정 요소(버튼)을 찾아 반환한다.
addEventListener(): 특정 요소에 이벤트가 발생(버튼 클릭) 했을 때 특정 동작(댓글 객체 전달)을 수행한다.
fetch(): 웹 페이지에서 REST API 요청(POST 요청) 을 보낸다.


1. 버튼 변수화
 -     const commentCreateBtn = document.querySelector("#comment-create-btn");

2. 버튼 이벤트 감지
 -     commentCreateBtn.addEventListener("click", function(){

3. 댓글 객체 생성 - 객체 리터럴 방식
 - const comment = {
            nickname: document.querySelector("#new-comment-nickname").value,
            body: document.querySelector("#new-comment-body").value,
            articleId: document.querySelector("#new-comment-article-id").value
            };

4. REST API 호출과 응답처리
 : 자바스크립트로 REST API 요청을 보낼 때 fetch() 함수를 사용한다. POST 요청을 보낼 때 형식은 

const url ="/api/articles/"+comment.articleId+"/comments";
    fetch(url, {
        method : "POST",
        headers : {
            "Content-Type" : "application/json"
            },
        body : JSON.stringify(comment)
         }).then(response => {
            const msg = (response.ok) ? "댓글이 등록 됐습니다." : "댓글 등록 실패";
            alert(msg);
            window.location.reload();
         });

----------------------------------------------------------------------------------------------

!! 웹 페이지에서 댓글 수정하기 !!

1. 댓글 수정 버튼과 모달 추가하기
 - _list.mustache 파일 안에 nickname 옆 button 태그 삽입

2. 모달 트리거 버튼 
 : data-bs-toggle ="modal"  - 클릭하면 모달이 나타나고 다시 클릭하면 사라짐
 : data-bs-target = "#exampleModal"= 해당 id의 모달 실행

==> 트리거 버튼의 target id와 모달의 id를 동일하게 맞춘다.

3. 모달 본문에 수정 폼을 삽입한다.
 - 수정 폼에서 각 input 박스의 id를 알맞게 수정한다.
 
4. 댓글을 수정하기 위해서는 이전 댓글 데이터를 가져와야한다. 댓글 수정 버튼을 클릭했을 때 수정 폼에 이전 댓글 데이터가 
	전달될 수 있도록 한다. (트리거 데이터 전달하기)
 - 트리거 버튼 속성에 data-bs-id = "{{id}}"		//댓글의 각 id nickname body 부모게시글 id 저장
		data-bs-nickname = "{{nickname}}"
		data-bs-body = "{{body}}"
		data-bs-article-id = "{{articleId}}" 추가하기

 - data- 로 시작하는 속성을 데이터 속성이라고 한다. 데이터 속성은 html 요소에 추가 정보를 저장하고 싶을 때 사용한다.
	+ 개수에 제한이 없으므로 하나의 요소에 데이터 속성을 사용할 수 있다. 속성 이름은 data-로 시작한다. 형식은 자유


5. 받아온 데이터를 모달의 각 폼에 출력한다(자바스크립트) -> 모달 이벤트 처리 
 - 모달 이벤트 처리를 하려면 모달 선택을 해야한다. 
    const commentEditModal = document.querySelector("#comment-edit-modal");

 - 모달을 변수화 했으니 모달이 열리는 이벤트를 감지하고 있다가 이벤트가 발생하면 기존 댓글을 받아온다.
    commentEditModal.addEventListener("show.bs.modal", function(event) {

 -show.bs.modal : 모달이 표시되기 직전 실행되는 이벤트
 -function(event) : 이벤트를 받아 처리하는 함수, 즉 이벤트 헨들러
 -function(event)의 event : 발생한 이벤트 정보를 가리키는 매개변수 , show.bs.modal을 가리킨다.

	1) 트리거 버튼 선택
// 모달 트리거 버튼은 매개변수로 받은 event의 relatedTarget 즉, event.relatedTarget 으로 선택할 수 있다. 선택한 버튼을 저장한다.
	const triggerBtn = event.relatedTarget;

	
	2) 데이터 가져오기
// 앞에서 모달 트리거 버튼의 속성 값으로 저장한것을 triggetBtn 변수를 통해 가져온다.
	const id = triggerBtn.getAttribute("data-bs-id");
            const nickname = triggerBtn.getAttribute("data-bs-nickname");
            const body = triggerBtn.getAttribute("data-bs-body");
            const articleId = triggerBtn.getAttribute("data-bs-article-id");

// 가져온 데이터를 모달의 각 폼에 반영한다.
	3) 수정 폼에 데이터 반영
	document.querySelector("#edit-comment-nickname").value= nickname;
    	document.querySelector("#edit-comment-body").value= body;
  	document.querySelector("#edit-comment-id").value= id;
    	document.querySelector("#edit-comment-article-id").value= articleId;



6. 자바스크립트로 REST API 호출하고 응답처리하기
 - 모달 창 정보로 댓글을 수정한다. 수정 완료 버튼을 클릭해 REST API 를 호출해서 수정 내용을 반영한다.
 1) 수정완료 버튼을 변수로 가져온다.
//수정완료 버튼 선택
     const commentUpdateBtn = document.querySelector("#comment-update-btn");

 2)수정완료 버튼에 클릭 이벤트가 발생하는지 감지하고 있다가 이벤트가 발생하면 함수를 실행하도록한다.
//클릭 이벤트 처리
        commentUpdateBtn.addEventListener("click", function(){

 3) 댓글을 수정하기 위해 객체를 먼저 생성한다. 
//수정 댓글 객체 생성
const comment = {
            id: document.querySelector("#edit-comment-id").value,
            nickname: document.querySelector("#edit-comment-nickname").value,
            body: document.querySelector("#edit-comment-body").value,
            article_id: document.querySelector("#edit-comment-article-id").value
            };

 4) 객체가 만들어 졌으면 REST API 를 호출해 수정 내용을 db에 반영한다. 
  - url 변수 만들고 댓글 수정 api 주소를 저장한다. api 주소에서 댓글의 id는 매번 바뀌므로 comment.id로 작성하고 앞의 주소와 연결한다..
            const url = "/api/comments/" +comment.id;


5) fetch() 함수를 통해 
 첫번쨰 전달값 : url을 넘기고 
            fetch(url, {

 두번째 전달값 : 요청 메서드, 헤더 정보, 전송 본문
	method : "PATCH",
            headers: {
                "Content-Type": "application/json"
                },
            body: JSON.stringify(comment)


6) 사용자가 댓글 수정이 잘 됐는지 확인 시켜주기 위해 응답 처리로 fetch().then(response => {응답 처리문} 구문을 이용한다.
	.then(response => {
                const msg = (response.ok) ? "댓글이 수정되었습니다." : "댓글 수정 실패.";
                alert(msg)
                window.location.reload();
                });


[댓글 수정 요약 ]
->1. 모달 : 웹에서 새 창을 띄우는 팝업 창과 달리 같은 브라우저 내부에서 사우이 레이어를 띄우는 방식으로 사용하는 창.
	모달 창이 뜨면 기존 창은 비활성 상태가 되고, 모달 창을 종료해야만 원래 화면으로 돌아갈 수 있다.

   2. 댓글 수정하기 
    2-1 : 모달 기능을 이용해 모달 창에 수정 폼 만들기
    2-2 : 모달 트리거 버튼을 통해 기존 댓글을 가져와 수정 폼에 반영한 후 REST API 요청 보내기.

   3. 트리거 데이터 전달
    3-1 : 모달 트리거 버튼에 수정할 댓글 정보를 data-* 속성 값으로 저장한다.
    3-2 : show.bs.modal 이벤트를 감지해 핸들러에서 모달 트리거 버튼을 변수화 한다.
    3-3 : 버튼 변수를 이용해 data-* 속성에 담긴 댓글 정보를 가져온다.
    3-4 : 수정 폼에 데이터를 반영한다.

   4. 모달 이벤트 감지
    - 모달은 열리기 직전 show.bs.modal 이벤트를 발생 시키고ㅡ, 이를 처리할 함수는 발생한 이벤트를 첫번째 매개변수로 받아
 	실행한다.
    commentEditModal.addEventListener("show.bs.modal", function(event) {


----------------------------------------------------------------------------------------------
!! 댓글 삭제하기 !!

1. 댓글 [삭제] 버튼 추가하기
 - 수정 버튼 옆에
 <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn">삭제</button>

2. [삭제]버튼을 클릭해 REST API 요청 보내기

 1) 클릭 이벤트 처리하기
 -     const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn")
 
  2) querySelectorAll 을 사용해서 모든 삭제 버튼을 가져올 수 있다.
   
  3)forEach()메서드를 사용해서 데이터 묶음을 순회하면서 처리한다.
   commentDeleteBtns.forEach(btn => {
        btn.addEventListener("click",(event) => {
            const commentDeleteBtn = event.target;
            const commentId = commentDeleteBtn.getAttribute("data-comment-id");
            console.log(`삭제 버튼 클릭: ${commentId}번 댓글`);
            const url = `/api/comments/${commentId}`;


3. 자바스크립트로 REST API 호출하고 응답처리하기

 1) 첫번째 전달값으로  api 주소를 가지고 있는 url 을 넘긴다.
 2) 두번째 전달값으로 요청 메서드를 넘긴다. 댓글을 생성하거나 수정할 때 처럼 전송 본문이 잇는 것이 아니므로
	header와 body 속성은 작성하지 않아도 된다.
 3) 응답 처리 구문을 작성한다.
 4) 댓글 삭제에 성공하면 화면에 삭제 메시지를 띄운다.
	
	fetch(url, {
                method: "DELETE"
            }).then(response => {
            if(!response.ok){
            alert("댓글 삭제 실패");
            return;
            }
            const msg = `${commentId}번 댓글을 삭제했습니다.`;
            alert(msg);
            window.location.reload();
            });